// Do not edit this file; automatically generated by build.py.
'use strict';

/*

 Visual Blocks Editor

 Copyright 2016 Massachusetts Institute of Technology
 All rights reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/
Blockly.Colours={motion:{primary:"#4C97FF",secondary:"#4280D7",tertiary:"#3373CC"},looks:{primary:"#9966FF",secondary:"#855CD6",tertiary:"#774DCB"},sounds:{primary:"#CF63CF",secondary:"#C94FC9",tertiary:"#BD42BD"},control:{primary:"#FFAB19",secondary:"#EC9C13",tertiary:"#CF8B17"},event:{primary:"#FFBF00",secondary:"#E6AC00",tertiary:"#CC9900"},sensing:{primary:"#5CB1D6",secondary:"#47A8D1",tertiary:"#2E8EB8"},pen:{primary:"#0fBD8C",secondary:"#0DA57A",tertiary:"#0B8E69"},operators:{primary:"#59C059",
secondary:"#46B946",tertiary:"#389438"},data:{primary:"#FF8C1A",secondary:"#FF8000",tertiary:"#DB6E00"},more:{primary:"#FF6680",secondary:"#FF4D6A",tertiary:"#FF3355"},cMathOperation:{primary:"#EC9C13",secondary:"#EC9C13",tertiary:"#CF8B17"},cVariableOperation:{primary:"#CF63CF",secondary:"#C94FC9",tertiary:"#BD42BD"},cModuleInput:{primary:"#855CD6",secondary:"#855CD6",tertiary:"#774DCB"},cArduinoStatement:{primary:"#4C97FF",secondary:"#4280D7",tertiary:"#3373CC"},cInstanceStatement:{primary:"#9966FF",
secondary:"#855CD6",tertiary:"#774DCB"},cArduinoInput:{primary:"#4280D7",secondary:"#4280D7",tertiary:"#3373CC"},cInstanceDefine:{primary:"#0fBD8C",secondary:"#0DA57A",tertiary:"#0B8E69"},cVariableDefine:{primary:"#59C059",secondary:"#46B946",tertiary:"#389438"},cLoop:{primary:"#FFAB19",secondary:"#EC9C13",tertiary:"#CF8B17"},text:"#575E75",workspace:"#F9F9F9",toolboxHover:"#4C97FF",toolboxSelected:"#005053",toolboxText:"#112222",toolbox:"#006468",flyout:"#006468",scrollbar:"#CECDCE",scrollbarHover:"#CECDCE",
textField:"#FFFFFF",insertionMarker:"#000000",insertionMarkerOpacity:.2,dragShadowOpacity:.3,stackGlow:"#FFF200",stackGlowOpacity:1,replacementGlow:"#FFFFFF",replacementGlowOpacity:1,colourPickerStroke:"#FFFFFF",fieldShadow:"rgba(0,0,0,0.1)",dropDownShadow:"rgba(0, 0, 0, .3)",numPadBackground:"#547AB2",numPadBorder:"#435F91",numPadActiveBackground:"#435F91",numPadText:"#FFFFFF",valueReportBackground:"#FFFFFF",valueReportBorder:"#AAAAAA"};
// Copyright 2016 Google Inc.  Apache License 2.0
Blockly.constants={};Blockly.DRAG_RADIUS=3;Blockly.FLYOUT_DRAG_RADIUS=10;Blockly.SNAP_RADIUS=48;Blockly.CONNECTING_SNAP_RADIUS=96;Blockly.CURRENT_CONNECTION_PREFERENCE=20;Blockly.BUMP_DELAY=0;Blockly.COLLAPSE_CHARS=30;Blockly.LONGPRESS=750;Blockly.SOUND_LIMIT=100;Blockly.DRAG_STACK=!0;Blockly.HSV_SATURATION=.45;Blockly.HSV_VALUE=.65;Blockly.SPRITE={width:96,height:124,url:"sprites.png"};Blockly.SVG_NS="http://www.w3.org/2000/svg";Blockly.HTML_NS="http://www.w3.org/1999/xhtml";
Blockly.INPUT_VALUE=1;Blockly.OUTPUT_VALUE=2;Blockly.NEXT_STATEMENT=3;Blockly.PREVIOUS_STATEMENT=4;Blockly.DUMMY_INPUT=5;Blockly.ALIGN_LEFT=-1;Blockly.ALIGN_CENTRE=0;Blockly.ALIGN_RIGHT=1;Blockly.DRAG_NONE=0;Blockly.DRAG_STICKY=1;Blockly.DRAG_BEGIN=1;Blockly.DRAG_FREE=2;Blockly.OPPOSITE_TYPE=[];Blockly.OPPOSITE_TYPE[Blockly.INPUT_VALUE]=Blockly.OUTPUT_VALUE;Blockly.OPPOSITE_TYPE[Blockly.OUTPUT_VALUE]=Blockly.INPUT_VALUE;Blockly.OPPOSITE_TYPE[Blockly.NEXT_STATEMENT]=Blockly.PREVIOUS_STATEMENT;
Blockly.OPPOSITE_TYPE[Blockly.PREVIOUS_STATEMENT]=Blockly.NEXT_STATEMENT;Blockly.TOOLBOX_AT_TOP=0;Blockly.TOOLBOX_AT_BOTTOM=1;Blockly.TOOLBOX_AT_LEFT=2;Blockly.TOOLBOX_AT_RIGHT=3;Blockly.OUTPUT_SHAPE_HEXAGONAL=1;Blockly.OUTPUT_SHAPE_ROUND=2;Blockly.OUTPUT_SHAPE_SQUARE=3;Blockly.STACK_GLOW_RADIUS=1.3;Blockly.REPLACEMENT_GLOW_RADIUS=2;Blockly.Categories={motion:"motion",looks:"looks",sound:"sounds",pen:"pen",data:"data",event:"events",control:"control",sensing:"sensing",operators:"operators",more:"more"};
Blockly.DELETE_AREA_NONE=null;Blockly.DELETE_AREA_TRASH=1;Blockly.DELETE_AREA_TOOLBOX=2;Blockly.VARIABLE_CATEGORY_NAME="VARIABLE";Blockly.PROCEDURE_CATEGORY_NAME="PROCEDURE";Blockly.RENAME_VARIABLE_ID="RENAME_VARIABLE_ID";Blockly.DELETE_VARIABLE_ID="DELETE_VARIABLE_ID";Blockly.Blocks.ArduinoModules={};
Blockly.Blocks.instance_rgb={init:function(){this.appendDummyInput().appendField(new Blockly.FieldImage("blockIcon/rgb.png",40,40,"*")).appendField("RGB Module:").appendField(new Blockly.FieldInstanceInput("RGB","rgb1","rgb"),"NAME");this.appendValueInput("R").setCheck("Pin").setAlign(Blockly.ALIGN_RIGHT).appendField("R=");this.appendValueInput("G").setCheck("Pin").setAlign(Blockly.ALIGN_RIGHT).appendField("G=");this.appendValueInput("B").setCheck("Pin").setAlign(Blockly.ALIGN_RIGHT).appendField("B=");this.setColour(Blockly.Colours.cInstanceDefine.primary,
Blockly.Colours.cInstanceDefine.secondary,Blockly.Colours.cInstanceDefine.tertiary);this.setTooltip("");this.setHelpUrl("");this.setInputsInline(!1)},provideBlocks:["module_set_rgb","rgbtocolor"]};
Blockly.Blocks.module_set_rgb={init:function(){this.appendDummyInput().appendField("set").appendField(new Blockly.FieldInstanceDropdown("RGB"),"rgb").appendField("=");this.appendValueInput("colour").setCheck("Colour");this.setInputsInline(!0);this.setPreviousStatement(!0,null);this.setNextStatement(!0,null);this.setColour(Blockly.Colours.cInstanceStatement.primary,Blockly.Colours.cInstanceStatement.secondary,Blockly.Colours.cInstanceStatement.tertiary);this.setTooltip("CLICK A COLOR TO CHANGE RGB LED COLOR");
this.setHelpUrl("")}};
Blockly.Blocks.rgbtocolor={init:function(){this.appendValueInput("r").setCheck(null).appendField("R");this.appendValueInput("g").setCheck(null).appendField("G");this.appendValueInput("b").setCheck(null).appendField("B");this.setInputsInline(!0);this.setOutput(!0,"Colour");this.setColour(Blockly.Colours.cModuleInput.secondary,Blockly.Colours.cModuleInput.secondary,Blockly.Colours.cModuleInput.tertiary);this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);this.setTooltip("CHOOSE INDIVIDUAL (RED, GREEN, BLUE)RGB LED LEADS ");this.setHelpUrl("")}};
Blockly.Blocks.instance_led={init:function(){this.appendDummyInput().appendField(new Blockly.FieldImage("blockIcon/led.png",40,40,"*")).appendField(new Blockly.FieldInstanceInput("LED","led1","led"),"NAME").appendField("on Pin");this.appendValueInput("Pin").setCheck("Pin");this.setInputsInline(!0);this.setColour(Blockly.Colours.cInstanceDefine.primary,Blockly.Colours.cInstanceDefine.secondary,Blockly.Colours.cInstanceDefine.tertiary);this.setTooltip("The LED module allows easy plug and play configuration to your Arduino's I/O lines. The LED can be controlled through a PWM signal or a digital high/ low output");
this.setHelpUrl("https://osepp.com/electronic-modules/sensor-modules/68-led-modules")},provideBlocks:["module_set_led"]};
Blockly.Blocks.module_set_led={init:function(){this.appendDummyInput().appendField("set").appendField(new Blockly.FieldInstanceDropdown("LED"),"NAME");this.appendValueInput("state").setCheck(["Boolean","Number"]);this.setInputsInline(!0);this.setPreviousStatement(!0,null);this.setNextStatement(!0,null);this.setColour(Blockly.Colours.cInstanceStatement.primary,Blockly.Colours.cInstanceStatement.secondary,Blockly.Colours.cInstanceStatement.tertiary);this.setTooltip("SET AN LED HIGH OR LOW (ON OR OFF)");
this.setHelpUrl("https://osepp.com/electronic-modules/sensor-modules/68-led-modules")}};
Blockly.Blocks.instance_button={init:function(){this.appendDummyInput().appendField(new Blockly.FieldImage("blockIcon/button.png",40,40,"*")).appendField(new Blockly.FieldInstanceInput("BUTTON","button1","button"),"NAME").appendField("on Pin");this.appendValueInput("Pin").setCheck("Pin");this.setInputsInline(!0);this.setColour(Blockly.Colours.cInstanceDefine.primary,Blockly.Colours.cInstanceDefine.secondary,Blockly.Colours.cInstanceDefine.tertiary);this.setTooltip("The push button module allows detection in states of high or low from the onboard momentary push button.");
this.setHelpUrl("https://osepp.com/electronic-modules/sensor-modules/76-push-button-module")},provideBlocks:["module_read_button"]};
Blockly.Blocks.module_read_button={init:function(){this.appendDummyInput().appendField(new Blockly.FieldInstanceDropdown("BUTTON"),"NAME").appendField("Pressed");this.setInputsInline(!0);this.setOutput(!0,"Boolean");this.setColour(Blockly.Colours.cModuleInput.primary,Blockly.Colours.cModuleInput.secondary,Blockly.Colours.cModuleInput.tertiary);this.setOutputShape(Blockly.OUTPUT_SHAPE_HEXAGONAL);this.setTooltip("DETECT IF BUTTON IS PRESSED");this.setHelpUrl("https://osepp.com/electronic-modules/sensor-modules/76-push-button-module")}};
Blockly.Blocks.instance_lcd1602={init:function(){this.appendDummyInput().appendField(new Blockly.FieldImage("blockIcon/1602lcd.svg",40,40,"*")).appendField("Lcd1602 ").appendField(new Blockly.FieldInstanceInput("LCD1602","lcd1","lcd"),"NAME");this.appendValueInput("RS").setCheck("Pin").setAlign(Blockly.ALIGN_RIGHT).appendField("RS Pin");this.appendValueInput("EN").setCheck("Pin").setAlign(Blockly.ALIGN_RIGHT).appendField("EN Pin");this.appendValueInput("D4").setCheck("Pin").setAlign(Blockly.ALIGN_RIGHT).appendField("D4 Pin");
this.appendValueInput("D5").setCheck("Pin").setAlign(Blockly.ALIGN_RIGHT).appendField("D5 Pin");this.appendValueInput("D6").setCheck("Pin").setAlign(Blockly.ALIGN_RIGHT).appendField("D6 Pin");this.appendValueInput("D7").setCheck("Pin").setAlign(Blockly.ALIGN_RIGHT).appendField("D7 Pin");this.setInputsInline(!1);this.setColour(Blockly.Colours.cInstanceDefine.primary,Blockly.Colours.cInstanceDefine.secondary,Blockly.Colours.cInstanceDefine.tertiary);this.setTooltip("The LCD display is a 16 character by 2 line (16*2) LCD display");
this.setHelpUrl("https://osepp.com/electronic-modules/breakout-boards/13-16-2-lcd-display")},provideBlocks:["module_lcd_print","module_lcd_clear","module_lcd_goto"]};
Blockly.Blocks.module_lcd_print={init:function(){this.appendValueInput("value").setCheck(["String","Number"]).appendField(new Blockly.FieldInstanceDropdown("LCD1602"),"NAME").appendField("print");this.setInputsInline(!0);this.setPreviousStatement(!0,null);this.setNextStatement(!0,null);this.setColour(Blockly.Colours.cInstanceStatement.primary,Blockly.Colours.cInstanceStatement.secondary,Blockly.Colours.cInstanceStatement.tertiary);this.setTooltip("DISPLAYS TO THE LCD DISPLAY");this.setHelpUrl("https://www.arduino.cc/en/Reference/LiquidCrystalPrint")}};
Blockly.Blocks.module_lcd_clear={init:function(){this.appendDummyInput().appendField(new Blockly.FieldInstanceDropdown("LCD1602"),"NAME").appendField("clear");this.setInputsInline(!0);this.setPreviousStatement(!0,null);this.setNextStatement(!0,null);this.setColour(Blockly.Colours.cInstanceStatement.primary,Blockly.Colours.cInstanceStatement.secondary,Blockly.Colours.cInstanceStatement.tertiary);this.setTooltip("REFRESH (CLEAR) THE LCD DISPLAY");this.setHelpUrl("https://www.arduino.cc/en/Reference/LiquidCrystalClear")}};
Blockly.Blocks.module_lcd_goto={init:function(){this.appendDummyInput().appendField(new Blockly.FieldInstanceDropdown("LCD1602"),"NAME").appendField("setCursor");this.appendValueInput("column").setCheck("Number").appendField("column");this.appendValueInput("line").setCheck("Number").appendField("line");this.setInputsInline(!0);this.setPreviousStatement(!0,null);this.setNextStatement(!0,null);this.setColour(Blockly.Colours.cInstanceStatement.primary,Blockly.Colours.cInstanceStatement.secondary,Blockly.Colours.cInstanceStatement.tertiary);
this.setTooltip("SET THE ROW AND COLUMN OF THE LCD DISPLAY");this.setHelpUrl("https://www.arduino.cc/en/Reference/LiquidCrystalSetCursor")}};
Blockly.Blocks.instance_buzzer={init:function(){this.appendDummyInput().appendField(new Blockly.FieldImage("blockIcon/buzzer.png",40,40,"*")).appendField(new Blockly.FieldInstanceInput("BUZZER","buzzer1","buzzer"),"NAME").appendField("on Pin");this.appendValueInput("Pin").setCheck("Pin");this.setInputsInline(!0);this.setColour(Blockly.Colours.cInstanceDefine.primary,Blockly.Colours.cInstanceDefine.secondary,Blockly.Colours.cInstanceDefine.tertiary);this.setTooltip("The Piezo sensor acts both as an output buzzer device and an input device measuring sound pressure.");
this.setHelpUrl("https://osepp.com/electronic-modules/sensor-modules/72-piezo-sensor-module")},provideBlocks:["module_set_buzzer"]};
Blockly.Blocks.module_set_buzzer={init:function(){this.appendDummyInput().appendField("set").appendField(new Blockly.FieldInstanceDropdown("BUZZER"),"NAME");this.appendValueInput("state").setCheck(["Boolean","Number"]);this.setInputsInline(!0);this.setPreviousStatement(!0,null);this.setNextStatement(!0,null);this.setColour(Blockly.Colours.cInstanceStatement.primary,Blockly.Colours.cInstanceStatement.secondary,Blockly.Colours.cInstanceStatement.tertiary);this.setTooltip("TURN THE BUZZER HIGH OR LOW (ON OR OFF)");
this.setHelpUrl("https://osepp.com/electronic-modules/sensor-modules/72-piezo-sensor-module")}};
Blockly.Blocks.instance_speaker={init:function(){this.appendDummyInput().appendField(new Blockly.FieldImage("blockIcon/speaker.svg",40,40,"*")).appendField(new Blockly.FieldInstanceInput("SPEAKER","speaker1","speaker"),"NAME").appendField("on Pin");this.appendValueInput("Pin").setCheck("Pin");this.setInputsInline(!0);this.setColour(Blockly.Colours.cInstanceDefine.primary,Blockly.Colours.cInstanceDefine.secondary,Blockly.Colours.cInstanceDefine.tertiary);this.setTooltip("");this.setHelpUrl("")},provideBlocks:["module_buzzer_playtone",
"module_buzzer_notone"]};
Blockly.Blocks.module_buzzer_playtone={init:function(){this.appendValueInput("frequency").setCheck("Number").appendField(new Blockly.FieldInstanceDropdown("SPEAKER"),"NAME").appendField("play");this.setInputsInline(!0);this.setPreviousStatement(!0,null);this.setNextStatement(!0,null);this.setColour(Blockly.Colours.cInstanceStatement.primary,Blockly.Colours.cInstanceStatement.secondary,Blockly.Colours.cInstanceStatement.tertiary);this.setTooltip("PLAY A NOTE FROM THE SPEAKER");this.setHelpUrl("https://www.arduino.cc/en/Reference/Tone")}};
Blockly.Blocks.module_buzzer_notone={init:function(){this.appendDummyInput().appendField(new Blockly.FieldInstanceDropdown("SPEAKER"),"NAME").appendField("stop");this.setInputsInline(!0);this.setPreviousStatement(!0,null);this.setNextStatement(!0,null);this.setColour(Blockly.Colours.cInstanceStatement.primary,Blockly.Colours.cInstanceStatement.secondary,Blockly.Colours.cInstanceStatement.tertiary);this.setTooltip("STOP THE SPEAKER");this.setHelpUrl("https://www.arduino.cc/en/Reference/NoTone")}};
Blockly.Blocks.instance_fanmotor={init:function(){this.appendDummyInput().appendField(new Blockly.FieldImage("blockIcon/fanmotor.png",40,40,"*")).appendField("Fan Motor").appendField(new Blockly.FieldInstanceInput("FANMOTOR","fan1","fan"),"NAME");this.appendValueInput("INA").setCheck("Pin").setAlign(Blockly.ALIGN_RIGHT).appendField("INA");this.appendValueInput("INB").setCheck("Pin").setAlign(Blockly.ALIGN_RIGHT).appendField("INB");this.setInputsInline(!1);this.setColour(Blockly.Colours.cInstanceDefine.primary,
Blockly.Colours.cInstanceDefine.secondary,Blockly.Colours.cInstanceDefine.tertiary);this.setTooltip("The fan motor controller board allows speed and direction control of a low power DC motor.");this.setHelpUrl("https://osepp.com/electronic-modules/sensor-modules/59-fan-motor-module")},provideBlocks:["module_set_fanmotor"]};
Blockly.Blocks.module_set_fanmotor={init:function(){var a=new Blockly.FieldDropdown([["forward","f"],["backward","b"],["stop","s"]],function(a){this.sourceBlock_.updateStepShape(a,!0)});this.appendDummyInput().appendField(new Blockly.FieldInstanceDropdown("FANMOTOR"),"NAME").appendField(" ").appendField(a,"dir");this.appendValueInput("pwm").setCheck("Number");this.setInputsInline(!0);this.setPreviousStatement(!0,null);this.setNextStatement(!0,null);this.setColour(Blockly.Colours.cInstanceStatement.primary,
Blockly.Colours.cInstanceStatement.secondary,Blockly.Colours.cInstanceStatement.tertiary);this.setTooltip("CHOOSE THE SPEED AND DIRECTION OF FAN MOTOR");this.setHelpUrl("https://osepp.com/electronic-modules/sensor-modules/59-fan-motor-module")},afterCreateBeforRender:function(){this.updateStepShape(this.getFieldValue("dir"),!1)},updateStepShape:function(a,b){var c=this.getInput("pwm"),d=!c.hide;var e="s"==a?!1:!0;d!=e&&(c.setVisible(e),c.hide=!e,e&&b&&(c=c.connection.targetBlock())&&c.render());b&&
this.render()}};
Blockly.Blocks.instance_servo={init:function(){this.appendDummyInput().appendField(new Blockly.FieldImage("blockIcon/servo.png",40,40,"*")).appendField(new Blockly.FieldInstanceInput("SERVO","servo1","servo"),"NAME");this.appendValueInput("Pin").setCheck("Pin").appendField("on Pin");this.setInputsInline(!0);this.setColour(Blockly.Colours.cInstanceDefine.primary,Blockly.Colours.cInstanceDefine.secondary,Blockly.Colours.cInstanceDefine.tertiary);this.setTooltip("ervos have integrated gears and a shaft that can be precisely controlled. Standard servos allow the shaft to be positioned at various angles, usually between 0 and 180 degrees");this.setHelpUrl("https://www.arduino.cc/en/Reference/Servo")},
provideBlocks:["module_servo_write"]};function randomAngle(){return parseInt(180*Math.random())}Blockly.Blocks.angle_picker={init:function(){this.appendDummyInput().setAlign(Blockly.ALIGN_CENTRE).appendField(new Blockly.FieldAngle(randomAngle()),"ANGLE");this.setInputsInline(!0);this.setOutput(!0,"Number");this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);this.setColour(Blockly.Colours.textField)}};
Blockly.Blocks.module_servo_write={init:function(){this.appendDummyInput().appendField(new Blockly.FieldInstanceDropdown("SERVO"),"NAME");this.appendValueInput("angle").setCheck("Number").appendField("write");this.setInputsInline(!0);this.setPreviousStatement(!0,null);this.setNextStatement(!0,null);this.setColour(Blockly.Colours.cInstanceStatement.primary,Blockly.Colours.cInstanceStatement.secondary,Blockly.Colours.cInstanceStatement.tertiary);this.setTooltip("WRITE A SPECIFIC ANGLE FOR THE SERVO MOTOR");
this.setHelpUrl("https://www.arduino.cc/en/Reference/ServoWrite")}};
Blockly.Blocks.instance_stepper={init:function(){this.appendDummyInput().appendField(new Blockly.FieldImage("blockIcon/stepper.png",40,40,"*")).appendField("Stepper Motor").appendField(new Blockly.FieldInstanceInput("STEPPER","stepper1","stepper"),"NAME");var a=new Blockly.FieldDropdown([["FourPin","F"],["TwoPin","T"]],function(a){this.sourceBlock_.updateShape(a)});this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField("Pin Number").appendField(a,"pinNumber");this.appendValueInput("Pin1").setCheck("Pin").setAlign(Blockly.ALIGN_RIGHT).appendField("INA");
this.appendValueInput("Pin2").setCheck("Pin").setAlign(Blockly.ALIGN_RIGHT).appendField("INB");this.appendValueInput("Pin3").setCheck("Pin").setAlign(Blockly.ALIGN_RIGHT).appendField("INC");this.appendValueInput("Pin4").setCheck("Pin").setAlign(Blockly.ALIGN_RIGHT).appendField("IND");this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField("Steps per revolution").appendField(new Blockly.FieldNumber(0,1,Infinity,1),"spv");this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField("speed(rpm)").appendField(new Blockly.FieldNumber(0,
1,Infinity,1),"rpm");this.setInputsInline(!1);this.setColour(Blockly.Colours.cInstanceDefine.primary,Blockly.Colours.cInstanceDefine.secondary,Blockly.Colours.cInstanceDefine.tertiary);this.setTooltip("");this.setHelpUrl("https://www.arduino.cc/en/Reference/Stepper")},afterCreateBeforRender:function(){this.updateShape(this.getFieldValue("pinNumber"))},updateShape:function(a,b){var c=this.getInput("Pin3"),d=c.isVisible();var e="T"==a?!1:!0;d!=e&&(d=function(a,b){a.setVisible(b);a.hide=!b;var c=a.connection.targetBlock();
c&&(b?c.render(!1):c.isShadow()?c.getField("Pin").setValue("select pin"):c.unplug())},d(c,e),d(this.getInput("Pin4"),e))},provideBlocks:["module_stepper_move","module_stepper_speed"]};
Blockly.Blocks.module_stepper_move={init:function(){this.appendDummyInput().appendField(new Blockly.FieldInstanceDropdown("STEPPER"),"NAME");this.appendValueInput("step").setCheck("Number").appendField("step");this.setInputsInline(!0);this.setPreviousStatement(!0,null);this.setNextStatement(!0,null);this.setColour(Blockly.Colours.cInstanceStatement.primary,Blockly.Colours.cInstanceStatement.secondary,Blockly.Colours.cInstanceStatement.tertiary);this.setTooltip("INPUT THE STEPPER MOTORS STEP AMOUNT");
this.setHelpUrl("https://www.arduino.cc/en/Reference/StepperStep")}};
Blockly.Blocks.module_stepper_speed={init:function(){this.appendDummyInput().appendField(new Blockly.FieldInstanceDropdown("STEPPER"),"NAME");this.appendValueInput("speed").setCheck("Number").appendField("setSpeed");this.setInputsInline(!0);this.setPreviousStatement(!0,null);this.setNextStatement(!0,null);this.setColour(Blockly.Colours.cInstanceStatement.primary,Blockly.Colours.cInstanceStatement.secondary,Blockly.Colours.cInstanceStatement.tertiary);this.setTooltip("SET THE SPEED OF THE STEPPER MOTOR");
this.setHelpUrl("https://www.arduino.cc/en/Reference/StepperSetSpeed")}};
Blockly.Blocks.instance_pir={init:function(){this.appendDummyInput().appendField(new Blockly.FieldImage("blockIcon/pir.png",40,40,"*")).appendField("PIR Sensor").appendField(new Blockly.FieldInstanceInput("PIR","pir1","pir"),"NAME");this.appendValueInput("Pin").setCheck("Pin").appendField("on Pin");this.setInputsInline(!0);this.setColour(Blockly.Colours.cInstanceDefine.primary,Blockly.Colours.cInstanceDefine.secondary,Blockly.Colours.cInstanceDefine.tertiary);this.setTooltip("The Passive Infrared sensor detects changes in motion within its environmen");
this.setHelpUrl("https://osepp.com/electronic-modules/sensor-modules/73-passive-infrared-sensor-pir-module")},provideBlocks:["module_pir_get"]};
Blockly.Blocks.module_pir_get={init:function(){this.appendDummyInput().appendField(new Blockly.FieldInstanceDropdown("PIR"),"NAME").appendField("is trigged");this.setInputsInline(!0);this.setOutput(!0,"Boolean");this.setColour(Blockly.Colours.cModuleInput.primary,Blockly.Colours.cModuleInput.secondary,Blockly.Colours.cModuleInput.tertiary);this.setOutputShape(Blockly.OUTPUT_SHAPE_HEXAGONAL);this.setTooltip("DETECT IF THE PIR SENSOR WAS TRIGGERED");this.setHelpUrl("https://osepp.com/electronic-modules/sensor-modules/73-passive-infrared-sensor-pir-module")}};
Blockly.Blocks.instance_potentiometer={init:function(){this.appendDummyInput().appendField(new Blockly.FieldImage("blockIcon/potentiometer.png",40,40,"*")).appendField("Potentiometer").appendField(new Blockly.FieldInstanceInput("POTENTIOMETER","pot1","pot"),"NAME");this.appendValueInput("Pin").setCheck("Pin").appendField("on Pin");this.setInputsInline(!0);this.setColour(Blockly.Colours.cInstanceDefine.primary,Blockly.Colours.cInstanceDefine.secondary,Blockly.Colours.cInstanceDefine.tertiary);this.setTooltip("The potentiometer module is able to adjust and read variations in voltage.");
this.setHelpUrl("https://osepp.com/electronic-modules/sensor-modules/74-potentiometer-module")},provideBlocks:["module_potentiometer_get"]};
Blockly.Blocks.module_potentiometer_get={init:function(){this.appendDummyInput().appendField(new Blockly.FieldInstanceDropdown("POTENTIOMETER"),"NAME").appendField("value");this.setInputsInline(!0);this.setOutput(!0,"Number");this.setColour(Blockly.Colours.cModuleInput.primary,Blockly.Colours.cModuleInput.secondary,Blockly.Colours.cModuleInput.tertiary);this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);this.setTooltip("READ THE KNOB (POTENTIOMETER) VALUE(0-1023)");this.setHelpUrl("https://osepp.com/electronic-modules/sensor-modules/74-potentiometer-module")}};
Blockly.Blocks.instance_slider={init:function(){this.appendDummyInput().appendField(new Blockly.FieldImage("blockIcon/slider.png",40,40,"*")).appendField("sensor").appendField(new Blockly.FieldInstanceInput("SLIDER","slider","slider"),"NAME");this.appendValueInput("Pin").setCheck("Pin").appendField("on Pin");this.setInputsInline(!0);this.setColour(Blockly.Colours.cInstanceDefine.primary,Blockly.Colours.cInstanceDefine.secondary,Blockly.Colours.cInstanceDefine.tertiary);this.setTooltip("");this.setHelpUrl("")},
provideBlocks:["module_slider_get"]};Blockly.Blocks.module_slider_get={init:function(){this.appendDummyInput().appendField(new Blockly.FieldInstanceDropdown("SLIDER"),"NAME").appendField("value");this.setInputsInline(!0);this.setOutput(!0,"Number");this.setColour(Blockly.Colours.cModuleInput.primary,Blockly.Colours.cModuleInput.secondary,Blockly.Colours.cModuleInput.tertiary);this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);this.setTooltip("READ THE SLIDER VALUE(0-1023)");this.setHelpUrl("")}};
Blockly.Blocks.instance_lightsensor={init:function(){this.appendDummyInput().appendField(new Blockly.FieldImage("blockIcon/lightsensor.png",40,40,"*")).appendField("light sensor").appendField(new Blockly.FieldInstanceInput("LIGHTSENSOR","light1","light"),"NAME");this.appendValueInput("Pin").setCheck("Pin").appendField("on Pin");this.setInputsInline(!0);this.setColour(Blockly.Colours.cInstanceDefine.primary,Blockly.Colours.cInstanceDefine.secondary,Blockly.Colours.cInstanceDefine.tertiary);this.setTooltip("");
this.setHelpUrl("")},provideBlocks:["module_lightsensor_get"]};
Blockly.Blocks.module_lightsensor_get={init:function(){this.appendDummyInput().appendField(new Blockly.FieldInstanceDropdown("LIGHTSENSOR"),"NAME").appendField("value");this.setInputsInline(!0);this.setOutput(!0,"Number");this.setColour(Blockly.Colours.cModuleInput.primary,Blockly.Colours.cModuleInput.secondary,Blockly.Colours.cModuleInput.tertiary);this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);this.setTooltip("READ THE LIGHT VALUE(0-1023) FROM THE LIGHT SENSOR");this.setHelpUrl("")}};
Blockly.Blocks.instance_lm35={init:function(){this.appendDummyInput().appendField(new Blockly.FieldImage("blockIcon/temperaturesensor.png",40,40,"*")).appendField("sensor").appendField(new Blockly.FieldInstanceInput("LM35","lm35_1","lm35_"),"NAME");this.appendValueInput("Pin").setCheck("Pin").appendField("on Pin");this.setInputsInline(!0);this.setColour(Blockly.Colours.cInstanceDefine.primary,Blockly.Colours.cInstanceDefine.secondary,Blockly.Colours.cInstanceDefine.tertiary);this.setTooltip("LM35 Temperature sensor uses the LM35 integrated circuit. Can be used in numerous weather detection applications for home automation / weather monitoring.");
this.setHelpUrl("https://osepp.com/electronic-modules/sensor-modules/79-lm35-temperature-sensor-module")},provideBlocks:["module_lm35_get"]};
Blockly.Blocks.module_lm35_get={init:function(){this.appendDummyInput().appendField(new Blockly.FieldInstanceDropdown("LM35"),"NAME").appendField("Celsius");this.setInputsInline(!0);this.setOutput(!0,"Number");this.setColour(Blockly.Colours.cModuleInput.primary,Blockly.Colours.cModuleInput.secondary,Blockly.Colours.cModuleInput.tertiary);this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);this.setTooltip("READ THE TEMPERATURE IN CELSIUS FROM THE TEMPERATURE SENSOR");this.setHelpUrl("https://osepp.com/electronic-modules/sensor-modules/79-lm35-temperature-sensor-module")}};
Blockly.Blocks.instance_soundsensor={init:function(){this.appendDummyInput().appendField(new Blockly.FieldImage("blockIcon/soundsensor.png",40,40,"*")).appendField("sensor").appendField(new Blockly.FieldInstanceInput("SOUNDSENSOR","sound1","sound"),"NAME");this.appendValueInput("Pin").setCheck("Pin").appendField("on Pin");this.setInputsInline(!0);this.setColour(Blockly.Colours.cInstanceDefine.primary,Blockly.Colours.cInstanceDefine.secondary,Blockly.Colours.cInstanceDefine.tertiary);this.setTooltip("The sound sensor is the perfect sensor to detect environmental variations in noise.");
this.setHelpUrl("https://osepp.com/electronic-modules/sensor-modules/78-sound-sensor-module")},provideBlocks:["module_soundsensor_get"]};
Blockly.Blocks.module_soundsensor_get={init:function(){this.appendDummyInput().appendField(new Blockly.FieldInstanceDropdown("SOUNDSENSOR"),"NAME").appendField("value");this.setInputsInline(!0);this.setOutput(!0,"Number");this.setColour(Blockly.Colours.cModuleInput.primary,Blockly.Colours.cModuleInput.secondary,Blockly.Colours.cModuleInput.tertiary);this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);this.setTooltip("READ THE SOUND VOLUME(0-1023) FROM THE SOUND SENSOR");this.setHelpUrl("https://osepp.com/electronic-modules/sensor-modules/78-sound-sensor-module")}};
Blockly.Blocks.instance_ultrasonic={init:function(){this.appendDummyInput().appendField(new Blockly.FieldImage("blockIcon/ultrasonic.png",40,40,"*")).appendField(new Blockly.FieldInstanceInput("ULTRASONIC","ultr1","ultr"),"NAME");this.appendValueInput("trigPin").setCheck("Pin").setAlign(Blockly.ALIGN_RIGHT).appendField("trig pin");this.appendValueInput("echoPin").setCheck("Pin").setAlign(Blockly.ALIGN_RIGHT).appendField("echo pin");this.setInputsInline(!1);this.setColour(Blockly.Colours.cInstanceDefine.primary,
Blockly.Colours.cInstanceDefine.secondary,Blockly.Colours.cInstanceDefine.tertiary);this.setTooltip("An ultrasonic transmitter and receiver sensor all in one.");this.setHelpUrl("https://osepp.com/electronic-modules/sensor-modules/62-osepp-ultrasonic-sensor-module")},provideBlocks:["module_ultrasonic_get"]};
Blockly.Blocks.module_ultrasonic_get={init:function(){this.appendDummyInput().appendField("distance(mm) of").appendField(new Blockly.FieldInstanceDropdown("ULTRASONIC"),"NAME");this.setInputsInline(!0);this.setOutput(!0,"Number");this.setColour(Blockly.Colours.cModuleInput.primary,Blockly.Colours.cModuleInput.secondary,Blockly.Colours.cModuleInput.tertiary);this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);this.setTooltip("READ THE DISTANCE IN MILLIMETERS OF THE ULTRASONIC SENSOR");this.setHelpUrl("https://osepp.com/electronic-modules/sensor-modules/62-osepp-ultrasonic-sensor-module")}};
Blockly.Blocks.instance_4dtouch={init:function(){this.appendDummyInput().appendField(new Blockly.FieldImage("https://osepp.com/images/igallery/resized/1-100/LS00010_web-81-300-225-80.jpg",40,40,"*")).appendField(new Blockly.FieldInstanceInput("TOUCH4D","Touch1","Touch"),"NAME");this.appendValueInput("OUT1").setCheck("Pin").setAlign(Blockly.ALIGN_RIGHT).appendField("OUT1");this.appendValueInput("OUT2").setCheck("Pin").setAlign(Blockly.ALIGN_RIGHT).appendField("OUT2");this.appendValueInput("OUT3").setCheck("Pin").setAlign(Blockly.ALIGN_RIGHT).appendField("OUT3");
this.appendValueInput("OUT4").setCheck("Pin").setAlign(Blockly.ALIGN_RIGHT).appendField("OUT4");this.setInputsInline(!1);this.setColour(Blockly.Colours.cInstanceDefine.primary,Blockly.Colours.cInstanceDefine.secondary,Blockly.Colours.cInstanceDefine.tertiary);this.setTooltip("Capacitive touch Module");this.setHelpUrl("https://osepp.com/electronic-modules/sensor-modules/53-4-digit-touch-sensor-module")},provideBlocks:["module_4dtouch_get"]};
Blockly.Blocks.module_4dtouch_get={init:function(){this.appendDummyInput().appendField(new Blockly.FieldInstanceDropdown("TOUCH4D"),"NAME").appendField(" ");this.appendDummyInput().appendField(new Blockly.FieldDropdown([["OUT1","OUT1"],["OUT2","OUT2"],["OUT3","OUT3"],["OUT4","OUT4"]]),"CHANNEL").appendField("Pressed");this.setInputsInline(!0);this.setOutput(!0,"Boolean");this.setColour(Blockly.Colours.cModuleInput.primary,Blockly.Colours.cModuleInput.secondary,Blockly.Colours.cModuleInput.tertiary);
this.setOutputShape(Blockly.OUTPUT_SHAPE_HEXAGONAL);this.setTooltip("DETECT IF TOUCH SENSOR IS PRESSED");this.setHelpUrl("https://osepp.com/electronic-modules/sensor-modules/53-4-digit-touch-sensor-module")}};
Blockly.Blocks.instance_flame={init:function(){this.appendDummyInput().appendField(new Blockly.FieldImage("https://osepp.com/images/igallery/resized/1-100/Flame_Sensor_Module-92-800-600-80.jpg",40,40,"*")).appendField(new Blockly.FieldInstanceInput("FLAME","Flame1","Flame"),"NAME").appendField("on Pin");this.appendValueInput("Pin").setCheck("Pin");this.setInputsInline(!0);this.setColour(Blockly.Colours.cInstanceDefine.primary,Blockly.Colours.cInstanceDefine.secondary,Blockly.Colours.cInstanceDefine.tertiary);
this.setTooltip("detect variations in light wavelength (such as fire flame detection) in the range of 760nm ?C 1100 nm");this.setHelpUrl("https://osepp.com/electronic-modules/sensor-modules/60-flame-sensor-module")},provideBlocks:["module_read_flame"]};
Blockly.Blocks.module_read_flame={init:function(){this.appendDummyInput().appendField(new Blockly.FieldInstanceDropdown("FLAME"),"NAME").appendField("Value");this.setInputsInline(!0);this.setOutput(!0,"Number");this.setColour(Blockly.Colours.cModuleInput.primary,Blockly.Colours.cModuleInput.secondary,Blockly.Colours.cModuleInput.tertiary);this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);this.setTooltip("DETECT VALUE OF FLAME SENSOR");this.setHelpUrl("https://osepp.com/electronic-modules/sensor-modules/60-flame-sensor-module")}};
Blockly.Blocks.instance_irdetector={init:function(){this.appendDummyInput().appendField(new Blockly.FieldImage("https://osepp.com/images/igallery/resized/101-200/IR_DETECTOR_IRDET_01-101-300-225-80.jpg",40,40,"*")).appendField(new Blockly.FieldInstanceInput("IRDETECTOR","detector1","detector"),"NAME").appendField("on Pin");this.appendValueInput("Pin").setCheck("Pin");this.setInputsInline(!0);this.setColour(Blockly.Colours.cInstanceDefine.primary,Blockly.Colours.cInstanceDefine.secondary,Blockly.Colours.cInstanceDefine.tertiary);
this.setTooltip("Obstacle avoidance module");this.setHelpUrl("https://osepp.com/electronic-modules/sensor-modules/64-ir-detector")},provideBlocks:["module_read_irdetector"]};
Blockly.Blocks.module_read_irdetector={init:function(){this.appendDummyInput().appendField(new Blockly.FieldInstanceDropdown("IRDETECTOR"),"NAME").appendField("Trigged");this.setInputsInline(!0);this.setOutput(!0,"Boolean");this.setColour(Blockly.Colours.cModuleInput.primary,Blockly.Colours.cModuleInput.secondary,Blockly.Colours.cModuleInput.tertiary);this.setOutputShape(Blockly.OUTPUT_SHAPE_HEXAGONAL);this.setTooltip("Detects when objects are within the calibrated range");this.setHelpUrl("https://osepp.com/electronic-modules/sensor-modules/64-ir-detector")}};Blockly.Blocks.control={};
Blockly.Blocks.control_if={init:function(){this.appendValueInput("IF0").setCheck(["Boolean","Number"]).appendField("if");this.appendStatementInput("DO0").setCheck(null);this.setInputsInline(!0);this.setPreviousStatement(!0,null);this.setNextStatement(!0,null);this.setColour(Blockly.Colours.cLoop.primary,Blockly.Colours.cLoop.secondary,Blockly.Colours.cLoop.tertiary);this.setTooltip("IF A VALUE IS TRUE TO A CONDITION, DO SOMETHING. ELSE IS EXCEPTION");this.setHelpUrl("https://www.arduino.cc/en/Reference/If");this.setMutator(new Blockly.Mutator(["controls_if_elseif",
"controls_if_else"]));this.elseCount_=this.elseifCount_=0},mutationToDom:function(){if(!this.elseifCount_&&!this.elseCount_)return null;var a=document.createElement("mutation");this.elseifCount_&&a.setAttribute("elseif",this.elseifCount_);this.elseCount_&&a.setAttribute("else",1);return a},domToMutation:function(a){a?(this.elseifCount_=parseInt(a.getAttribute("elseif"),10)||0,this.elseCount_=parseInt(a.getAttribute("else"),10)||0):this.elseCount_=this.elseifCount_=0;this.updateShape_()},decompose:function(a){var b=
a.newBlock("controls_if_if");b.initSvg();for(var c=b.nextConnection,d=1;d<=this.elseifCount_;d++){var e=a.newBlock("controls_if_elseif");e.initSvg();c.connect(e.previousConnection);c=e.nextConnection}this.elseCount_&&(a=a.newBlock("controls_if_else"),a.initSvg(),c.connect(a.previousConnection));return b},compose:function(a){var b=a.nextConnection.targetBlock();this.elseCount_=this.elseifCount_=0;a=[null];for(var c=[null],d=null;b;){switch(b.type){case "controls_if_elseif":this.elseifCount_++;a.push(b.valueConnection_);
c.push(b.statementConnection_);break;case "controls_if_else":this.elseCount_++;d=b.statementConnection_;break;default:throw"Unknown block type.";}b=b.nextConnection&&b.nextConnection.targetBlock()}this.updateShape_();for(b=1;b<=this.elseifCount_;b++)Blockly.Mutator.reconnect(a[b],this,"IF"+b),Blockly.Mutator.reconnect(c[b],this,"DO"+b);Blockly.Mutator.reconnect(d,this,"ELSE")},saveConnections:function(a){a=a.nextConnection.targetBlock();for(var b=1;a;){switch(a.type){case "controls_if_elseif":var c=
this.getInput("IF"+b),d=this.getInput("DO"+b);a.valueConnection_=c&&c.connection.targetConnection;a.statementConnection_=d&&d.connection.targetConnection;b++;break;case "controls_if_else":d=this.getInput("ELSE");a.statementConnection_=d&&d.connection.targetConnection;break;default:throw"Unknown block type.";}a=a.nextConnection&&a.nextConnection.targetBlock()}},updateShape_:function(){this.getInput("ELSE")&&this.removeInput("ELSE");for(var a=1;this.getInput("IF"+a);)this.removeInput("IF"+a),this.removeInput("DO"+
a),a++;for(a=1;a<=this.elseifCount_;a++)this.appendValueInput("IF"+a).setCheck(["Boolean","Number"]).appendField(Blockly.Msg.CONTROLS_IF_MSG_ELSEIF),this.appendStatementInput("DO"+a);this.elseCount_&&this.appendStatementInput("ELSE").appendField(Blockly.Msg.CONTROLS_IF_MSG_ELSE)}};
Blockly.Blocks.controls_if_elseif={init:function(){this.setColour(Blockly.Colours.cLoop.primary,Blockly.Colours.cLoop.secondary,Blockly.Colours.cLoop.tertiary);this.appendDummyInput().appendField(Blockly.Msg.CONTROLS_IF_ELSEIF_TITLE_ELSEIF);this.setPreviousStatement(!0);this.setNextStatement(!0);this.setTooltip(Blockly.Msg.CONTROLS_IF_ELSEIF_TOOLTIP);this.contextMenu=!1}};
Blockly.Blocks.controls_if_else={init:function(){this.setColour(Blockly.Colours.cLoop.primary,Blockly.Colours.cLoop.secondary,Blockly.Colours.cLoop.tertiary);this.appendDummyInput().appendField(Blockly.Msg.CONTROLS_IF_ELSE_TITLE_ELSE);this.setPreviousStatement(!0);this.setTooltip(Blockly.Msg.CONTROLS_IF_ELSE_TOOLTIP);this.contextMenu=!1}};
Blockly.Blocks.controls_if_if={init:function(){this.setColour(Blockly.Colours.cLoop.primary,Blockly.Colours.cLoop.secondary,Blockly.Colours.cLoop.tertiary);this.appendDummyInput().appendField(Blockly.Msg.CONTROLS_IF_IF_TITLE_IF);this.setNextStatement(!0);this.setTooltip(Blockly.Msg.CONTROLS_IF_IF_TOOLTIP);this.contextMenu=!1}};
function addShadowNumberToInput(a){var b=a.connection.targetBlock();b?b.render(!1):(b=a.sourceBlock_.workspace.newBlock("math_number"),b.setShadow(!0),b.getField("NUM").setText("1"),b.initSvg(),b.render(!1),a.connection.connect(b.outputConnection))}
Blockly.Blocks.control_forloop={init:function(){this.appendValueInput("init").setCheck(["NumberInstanceDefine","NumberInstance"]).appendField("for(");this.appendValueInput("initNumber").appendField("=").setCheck("Number");this.appendValueInput("CONDITION").setCheck(["Boolean","Number"]).appendField(";");this.appendValueInput("NAME").appendField(";").setCheck("NumberInstance");var a=new Blockly.FieldDropdown([["++","++"],["- -","--"],["+=","+="],["- =","-="],["=","="]],function(a){this.sourceBlock_.updateStepShape(a)});
this.appendDummyInput().appendField(a,"step");this.appendValueInput("stepNumber").setCheck("Number");this.appendDummyInput("ending").appendField(")");this.appendStatementInput("SUBSTACK").setCheck(null);this.setInputsInline(!0);this.setPreviousStatement(!0,null);this.setNextStatement(!0,null);this.setColour(Blockly.Colours.cLoop.primary,Blockly.Colours.cLoop.secondary,Blockly.Colours.cLoop.tertiary);this.setTooltip('THE "FOR" STATEMENT IS USED TO REPEAT AN ACTION WITHIN THIS BLOCK IF SET CONDITIONS ARE TRUE.s');
this.setHelpUrl("https://www.arduino.cc/en/Reference/For")},afterCreateBeforRender:function(){this.updateInitShape();this.updateStepShape(this.getFieldValue("step"))},onchange:function(a){if(this.workspace&&a.type!=Blockly.Events.UI&&a.type==Blockly.Events.MOVE&&(a.oldParentId==this.id||a.newParentId==this.id))if("init"==a.newInputName||"init"==a.oldInputName)this.updateInitShape(),this.render(),this.bumpNeighbours_();else if("NAME"==a.newInputName||"NAME"==a.oldInputName)this.updateStepShape(this.getFieldValue("step")),
this.render(),this.bumpNeighbours_()},updateInitShape:function(){var a=this.getInput("init"),b=this.getInput("initNumber"),c=null;if(a=a.connection.targetBlock())this.getInput("initNumber"),c=a.type;"instance_number_getter"!=c&&"instance_array_getter"!=c?(b.setVisible(!1),b.hide=!0):(b.setVisible(!0),b.hide=!1,addShadowNumberToInput(b))},updateStepShape:function(a){var b=this.getInput("NAME"),c=this.getInput("stepNumber"),d=this.getField("step");b.connection.targetBlock()?(d.hide=!1,d.setVisible(!0)):
(d.hide=!0,d.setVisible(!1));0<=a.indexOf("=")&&0==d.hide?!1!==c.hide&&(c.hide=!1,c.setVisible(!0),addShadowNumberToInput(c),(a=c.connection.targetBlock())&&a.render(!1)):!0!==c.hide&&(c.setVisible(!1),c.hide=!0)}};
Blockly.Blocks.control_while={init:function(){this.appendValueInput("CONDITION").setCheck(["Boolean","Number"]).appendField("while");this.appendStatementInput("SUBSTACK").setCheck(null);this.setInputsInline(!0);this.setPreviousStatement(!0,null);this.setNextStatement(!0,null);this.setColour(Blockly.Colours.cLoop.primary,Blockly.Colours.cLoop.secondary,Blockly.Colours.cLoop.tertiary);this.setTooltip("WHILE A VALUE IS TRUE, THEN A LOOP OCCURS");this.setHelpUrl("https://www.arduino.cc/en/Reference/While")}};
Blockly.Blocks.control_break={init:function(){this.appendDummyInput().appendField("break");this.setInputsInline(!0);this.setPreviousStatement(!0,null);this.setNextStatement(!0,null);this.setColour(Blockly.Colours.cLoop.primary,Blockly.Colours.cLoop.secondary,Blockly.Colours.cLoop.tertiary);this.setTooltip("BREAK IS USED TO EXIT FROM LOOPS");this.setHelpUrl("https://www.arduino.cc/en/Reference/Break")}};
Blockly.Blocks.control_delay={init:function(){this.appendValueInput("ms").setCheck("Number").appendField("delay");this.setInputsInline(!0);this.setPreviousStatement(!0,null);this.setNextStatement(!0,null);this.setColour(Blockly.Colours.cArduinoStatement.primary,Blockly.Colours.cArduinoStatement.secondary,Blockly.Colours.cArduinoStatement.tertiary);this.setTooltip("PAUSE THE PROGRAM FOR THE AMOUNT OF TIME (IN MILLISECONDS)");this.setHelpUrl("https://www.arduino.cc/en/Reference/Delay")}};
Blockly.Blocks.control_delaymicroseconds={init:function(){this.appendValueInput("us").setCheck("Number").appendField("delayMicroseconds");this.setInputsInline(!0);this.setPreviousStatement(!0,null);this.setNextStatement(!0,null);this.setColour(Blockly.Colours.cArduinoStatement.primary,Blockly.Colours.cArduinoStatement.secondary,Blockly.Colours.cArduinoStatement.tertiary);this.setTooltip("PAUSE THE PROGRAM FOR THE AMOUNT OF TIME (1000 Microseconds = 1 sec)");this.setHelpUrl("https://www.arduino.cc/en/Reference/DelayMicroseconds")}};
Blockly.Blocks.control_millis={init:function(){this.appendDummyInput().appendField("Get Millis");this.setInputsInline(!0);this.setOutput(!0,"Number");this.setColour(Blockly.Colours.cArduinoInput.secondary,Blockly.Colours.cArduinoInput.secondary,Blockly.Colours.cArduinoInput.tertiary);this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);this.setTooltip("RETURNS THE NUMBER OF MILLISECONDS (1 sec = 1000 milliseconds) SINCE THE ARDUINO BOARD BEGAN RUNNING THE CURRENT PROGRAM");this.setHelpUrl("https://www.arduino.cc/en/Reference/Millis")}};
Blockly.Blocks.control_micros={init:function(){this.appendDummyInput().appendField("Get micros");this.setInputsInline(!0);this.setOutput(!0,"Number");this.setColour(Blockly.Colours.cArduinoInput.secondary,Blockly.Colours.cArduinoInput.secondary,Blockly.Colours.cArduinoInput.tertiary);this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);this.setTooltip("RETURNS THE NUMBER OF MICROSECONDS (1 sec = 1,000,000 microseconds) SINCE THE ARDUINO BOARD BEGAN RUNNING THE CURRENT PROGRAM");this.setHelpUrl("https://www.arduino.cc/en/Reference/Micros")}};Blockly.Blocks.ArduinoInputOutput={};Blockly.Blocks.controlsetuploop={init:function(){this.appendDummyInput().setAlign(Blockly.ALIGN_CENTRE).appendField("Arduino Program");this.appendStatementInput("SETUPSTACK").setCheck(null).appendField("Setup");this.appendStatementInput("LOOPSTACK").setCheck(null).appendField("Loop");this.setInputsInline(!0);this.setColour("#006468");this.setTooltip("Arduino program structure,do setup once and do loop foreven");this.setHelpUrl("https://www.arduino.cc/en/Reference/HomePage")}};
Blockly.Blocks.io_readdigitalpin={init:function(){this.appendValueInput("Pin").setCheck("Number").appendField("digitalRead");this.setInputsInline(!0);this.setOutput(!0,"Boolean");this.setColour(Blockly.Colours.cArduinoInput.secondary,Blockly.Colours.cArduinoInput.secondary,Blockly.Colours.cArduinoInput.tertiary);this.setOutputShape(Blockly.OUTPUT_SHAPE_HEXAGONAL);this.setTooltip("READ THE VALUES FROM A SPECIFIC DIGITAL PIN, EITHER HIGH OR LOW");this.setHelpUrl("https://www.arduino.cc/en/Reference/DigitalRead")}};
Blockly.Blocks.io_readanalogpin={init:function(){this.appendValueInput("Pin").setCheck("Number").appendField("analogRead");this.setInputsInline(!0);this.setOutput(!0,"Number");this.setColour(Blockly.Colours.cArduinoInput.secondary,Blockly.Colours.cArduinoInput.secondary,Blockly.Colours.cArduinoInput.tertiary);this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);this.setTooltip("READ THE VALUES(0-1023) FROM SPECIFIED ANALOG PIN");this.setHelpUrl("https://www.arduino.cc/en/Reference/AnalogRead")}};
Blockly.Blocks.io_writedigitalpin={init:function(){this.appendValueInput("Pin").setCheck("Number").appendField("digitalWrite");this.appendValueInput("value").setCheck("Boolean").appendField(" ");this.setInputsInline(!0);this.setPreviousStatement(!0,null);this.setNextStatement(!0,null);this.setColour(Blockly.Colours.cArduinoStatement.primary,Blockly.Colours.cArduinoStatement.secondary,Blockly.Colours.cArduinoStatement.tertiary);this.setTooltip("WRITE A HIGH OR LOW VALUE TO A DIGITAL PIN");this.setHelpUrl("https://www.arduino.cc/en/Reference/DigitalWrite")}};
Blockly.Blocks.io_writeanalogpin={init:function(){this.appendValueInput("Pin").setCheck("Number").appendField("analogWrite");this.appendValueInput("value").setCheck("Number").appendField(" ");this.setInputsInline(!0);this.setPreviousStatement(!0,null);this.setNextStatement(!0,null);this.setColour(Blockly.Colours.cArduinoStatement.primary,Blockly.Colours.cArduinoStatement.secondary,Blockly.Colours.cArduinoStatement.tertiary);this.setTooltip("WRITE AS AN ANALOG VALUE(0-255) TO A PIN.");this.setHelpUrl("https://www.arduino.cc/en/Reference/AnalogWrite")}};
Blockly.Blocks.io_pinmode={init:function(){this.appendValueInput("Pin").setCheck("Number").appendField("pinMode");this.appendDummyInput().appendField(" ").appendField(new Blockly.FieldDropdown([["OUTPUT","OUTPUT"],["INPUT","INPUT"],["INPUT_PULLUP","INPUT_PULLUP"]]),"mode");this.setInputsInline(!0);this.setPreviousStatement(!0,null);this.setNextStatement(!0,null);this.setColour(Blockly.Colours.cArduinoStatement.primary,Blockly.Colours.cArduinoStatement.secondary,Blockly.Colours.cArduinoStatement.tertiary);
this.setTooltip("CONFIGURES THE SPECIFIC PIN TO BEHAVE EITHER AS AN INPUT OR OUTPUT");this.setHelpUrl("https://www.arduino.cc/en/Reference/PinMode")}};
Blockly.Blocks.io_arduino_uno_digitalpin_menu={init:function(){this.appendDummyInput().appendField(new Blockly.FieldDropdown([["0","0"],["1","1"],["2","2"],["3","3"],["4","4"],["5","5"],["6","6"],["7","7"],["8","8"],["9","9"],["10","10"],["11","11"],["12","12"],["13","13"],["A0","A0"],["A1","A1"],["A2","A2"],["A3","A3"],["A4","A4"],["A5","A5"]]),"Pin");this.setInputsInline(!0);this.setOutput(!0,"Number");this.setColour(Blockly.Colours.cArduinoInput.secondary,Blockly.Colours.cArduinoInput.secondary,
Blockly.Colours.cArduinoInput.tertiary);this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);this.setTooltip("");this.setHelpUrl("")}};
Blockly.Blocks.io_arduino_uno_analogpin_menu={init:function(){this.appendDummyInput().appendField(new Blockly.FieldDropdown([["A0","A0"],["A1","A1"],["A2","A2"],["A3","A3"],["A4","A4"],["A5","A5"],["A6","A6"],["A7","A7"]]),"Pin");this.setInputsInline(!0);this.setOutput(!0,"Number");this.setColour(Blockly.Colours.cArduinoInput.secondary,Blockly.Colours.cArduinoInput.secondary,Blockly.Colours.cArduinoInput.tertiary);this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);this.setTooltip("");this.setHelpUrl("")}};
Blockly.Blocks.io_arduino_uno_pwmpin_menu={init:function(){this.appendDummyInput().appendField(new Blockly.FieldDropdown([["3","3"],["5","5"],["6","6"],["9","9"],["10","10"],["11","11"]]),"Pin");this.setInputsInline(!0);this.setOutput(!0,"Number");this.setColour(Blockly.Colours.cArduinoInput.secondary,Blockly.Colours.cArduinoInput.secondary,Blockly.Colours.cArduinoInput.tertiary);this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);this.setTooltip("");this.setHelpUrl("")}};
Blockly.Blocks.io_pinstate_menu={init:function(){this.appendDummyInput().appendField(new Blockly.FieldDropdown([["HIGH","HIGH"],["LOW","LOW"]]),"state");this.setInputsInline(!0);this.setOutput(!0,"Boolean");this.setColour(Blockly.Colours.cArduinoInput.secondary,Blockly.Colours.cArduinoInput.secondary,Blockly.Colours.cArduinoInput.tertiary);this.setOutputShape(Blockly.OUTPUT_SHAPE_HEXAGONAL);this.setTooltip("");this.setHelpUrl("")}};
Blockly.Blocks.io_tone={init:function(){this.appendValueInput("Pin").setCheck("Number").appendField("tone");this.appendValueInput("frequency").setCheck("Number").appendField(" ");this.setInputsInline(!0);this.setPreviousStatement(!0,null);this.setNextStatement(!0,null);this.setColour(Blockly.Colours.cArduinoStatement.primary,Blockly.Colours.cArduinoStatement.secondary,Blockly.Colours.cArduinoStatement.tertiary);this.setTooltip("GENERATES A SPECIFIC TONE SOUND");this.setHelpUrl("https://www.arduino.cc/en/Reference/Tone")}};
Blockly.Blocks.io_tone_menu={init:function(){this.appendDummyInput().appendField(new Blockly.FieldDropdown([["NOTE_C3","131"],["NOTE_D3","147"],["NOTE_E3","165"],["NOTE_F3","175"],["NOTE_G3","196"],["NOTE_A3","220"],["NOTE_B3","247"],["NOTE_C4","262"],["NOTE_D4","294"],["NOTE_E4","330"],["NOTE_F4","349"],["NOTE_G4","392"],["NOTE_A4","440"],["NOTE_B4","494"],["NOTE_C5","532"],["NOTE_D5","587"],["NOTE_E5","659"],["NOTE_F5","698"],["NOTE_G5","784"],["NOTE_A5","880"],["NOTE_B5","988"]]),"Tone");this.setInputsInline(!0);
this.setOutput(!0,"Number");this.setColour(Blockly.Colours.cArduinoInput.secondary,Blockly.Colours.cArduinoInput.secondary,Blockly.Colours.cArduinoInput.tertiary);this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);this.setTooltip("");this.setHelpUrl("")}};
Blockly.Blocks.io_notone={init:function(){this.appendValueInput("Pin").setCheck("Number").appendField("noTone");this.setInputsInline(!0);this.setPreviousStatement(!0,null);this.setNextStatement(!0,null);this.setColour(Blockly.Colours.cArduinoStatement.primary,Blockly.Colours.cArduinoStatement.secondary,Blockly.Colours.cArduinoStatement.tertiary);this.setTooltip("STOPS THE TONE() SOUND");this.setHelpUrl("https://www.arduino.cc/en/Reference/NoTone")}};
Blockly.Blocks.io_pulsein={init:function(){this.appendValueInput("Pin").setCheck("Number").appendField("pulseIn");this.appendValueInput("value").setCheck("Boolean").appendField(" ");this.appendValueInput("timeout").setCheck("Number").appendField("Timeout");this.setInputsInline(!0);this.setOutput(!0,"Number");this.setColour(Blockly.Colours.cArduinoInput.primary,Blockly.Colours.cArduinoInput.secondary,Blockly.Colours.cArduinoInput.tertiary);this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);this.setTooltip("READS A PULSE (EITHER HIGH OR LOW) ON A PIN");
this.setHelpUrl("https://www.arduino.cc/en/Reference/PulseIn")}};
Blockly.Blocks.instance_serial={init:function(){this.appendDummyInput().appendField("Serial.begin(").appendField(new Blockly.FieldDropdown([["1200","1200"],["2400","2400"],["4800","4800"],["9600","9600"],["14400","14400"],["19200","19200"],["28800","28800"],["38400","38400"],["57600","57600"],["115200","115200"],["128000","128000"]]),"Bandrate").appendField(")");this.setInputsInline(!0);this.setPreviousStatement(!0,null);this.setNextStatement(!0,null);this.setColour(Blockly.Colours.cArduinoStatement.primary,
Blockly.Colours.cArduinoStatement.secondary,Blockly.Colours.cArduinoStatement.tertiary);this.setTooltip("SETS THE DATA RATE IN BITS PER SECOND (BAUD) FOR SERIAL DATA TRANSMISSION");this.setHelpUrl("https://www.arduino.cc/en/Serial/Begin")}};
Blockly.Blocks.serial_print={init:function(){this.appendValueInput("value").setCheck(["String","Number","Boolean"]).appendField("Serial").appendField(new Blockly.FieldDropdown([["print","print"],["println","println"]]),"action");this.setInputsInline(!0);this.setPreviousStatement(!0,null);this.setNextStatement(!0,null);this.setColour(Blockly.Colours.cArduinoStatement.primary,Blockly.Colours.cArduinoStatement.secondary,Blockly.Colours.cArduinoStatement.tertiary);this.setTooltip("PRINT A VARIABLE TO THE SERIAL PORT");
this.setHelpUrl("https://www.arduino.cc/en/Serial/Print")}};Blockly.Blocks.serial_available={init:function(){this.appendDummyInput().appendField("Serial.available");this.setInputsInline(!0);this.setOutput(!0,"Number");this.setColour(Blockly.Colours.cArduinoInput.primary,Blockly.Colours.cArduinoInput.secondary,Blockly.Colours.cArduinoInput.tertiary);this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);this.setTooltip("GET THE NUMBER OF BYTES (CHARACTERS) AVAILABLE FOR READING FROM THE SERIAL PORT");this.setHelpUrl("https://www.arduino.cc/en/Serial/Available")}};
Blockly.Blocks.serial_read={init:function(){this.appendDummyInput().appendField("Serial.read");this.setInputsInline(!0);this.setOutput(!0,"Number");this.setColour(Blockly.Colours.cArduinoInput.primary,Blockly.Colours.cArduinoInput.secondary,Blockly.Colours.cArduinoInput.tertiary);this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);this.setTooltip("READS INCOMING SERIAL DATA");this.setHelpUrl("https://www.arduino.cc/en/Serial/Read")}};
Blockly.Blocks.genMenu=function(){var a=[["select pin","select pin"]],b=[];if(!this||!this.sourceBlock_)return a;var c=this.sourceBlock_.workspace;c.isFlyout&&(c=c.targetWorkspace);c=c.getAllBlocks();for(var d=0,e;e=c[d];d++)"io_arduino_uno_pin_usable_menu"===e.type&&(e=e.inputList[0].fieldRow[0].getValue(),b.push(e));c=[];d="3 5 6 9 10 11".split(" ");switch(this.sourceBlock_.data?this.sourceBlock_.data.toLocaleLowerCase():"a"){case "pwm":for(var f=0;e=d[f];f++)0>b.indexOf(e)&&c.push([e,e]);break;
case "analog":for(f=0;7>=f;f++)0>b.indexOf("A"+f)&&c.push(["A"+f,"A"+f]);break;default:for(f=0;13>=f;f++)0>b.indexOf(f.toString())&&c.push([f.toString(),f.toString()]);for(f=0;5>=f;f++)0>b.indexOf("A"+f)&&c.push(["A"+f,"A"+f])}return 0<c.length?c:a};
Blockly.Blocks.io_arduino_uno_pin_usable_menu={init:function(){this.appendDummyInput().appendField(new Blockly.FieldDropdown(Blockly.Blocks.genMenu),"Pin");this.setInputsInline(!0);this.setOutput(!0,"Pin");this.setTooltip("digital pin set");this.setHelpUrl("");this.setColour(Blockly.Colours.cInstanceDefine.secondary,Blockly.Colours.cInstanceDefine.secondary,Blockly.Colours.cInstanceDefine.tertiary);this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND)}};Blockly.Blocks.InstancesNumber={};
Blockly.Blocks.instance_create_number={init:function(){this.appendDummyInput().appendField(new Blockly.FieldDropdown([["int","int"],["long","long"],["unsigned int","unsigned int"],["unsigned long","unsigned long"],["char","char"],["byte","byte"],["float","float"]]),"TYPE");this.appendDummyInput().appendField(" ").appendField(new Blockly.FieldInstanceInput("NumberInstance"),"NAME").appendField("=").appendField(new Blockly.FieldTextInput("0"),"INITVALUE");this.setInputsInline(!0);this.setColour(Blockly.Colours.cVariableDefine.primary,
Blockly.Colours.cVariableDefine.secondary,Blockly.Colours.cVariableDefine.tertiary);this.setOutput(!0,"NumberInstanceDefine");this.setOutputShape(Blockly.OUTPUT_SHAPE_SQUARE);var a=this;this.setTooltip(function(){return{"int":"Integers are your primary data-type for number storage.","long":"Long variables are extended size variables for number storage, and store 32 bits (4 bytes), from -2,147,483,648 to 2,147,483,647.","unsigned int":"only store positive values, yielding a useful range of 0 to 65,535 (2^16) - 1).",
"unsigned long":"Unsigned long variables are extended size variables for number storage, and store 32 bits (4 bytes). Unlike standard longs unsigned longs won't store negative numbers, making their range from 0 to 4,294,967,295 (2^32 - 1).","char":"A data type that takes up 1 byte of memory that stores a character value","byte":"A byte stores an 8-bit unsigned number, from 0 to 255.","float":"Datatype for floating-point numbers, a number that has a decimal point."}[a.getFieldValue("TYPE")]});this.setHelpUrl(function(){return{"int":"https://www.arduino.cc/en/Reference/Int",
"long":"https://www.arduino.cc/en/Reference/Long","unsigned int":"https://www.arduino.cc/en/Reference/UnsignedInt","unsigned long":"https://www.arduino.cc/en/Reference/UnsignedLong","char":"https://www.arduino.cc/en/Reference/Char","byte":"https://www.arduino.cc/en/Reference/Byte","float":"https://www.arduino.cc/en/Reference/Float"}[a.getFieldValue("TYPE")]})}};
Blockly.Blocks.instance_number_getter={init:function(){this.appendDummyInput().setAlign(Blockly.ALIGN_CENTRE).appendField(new Blockly.FieldInstanceGetter("",""),"NAME");this.setInputsInline(!0);this.setOutput(!0,["Number","NumberInstance"]);this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);this.setTooltip("retrieve value from variable sign");this.setHelpUrl("https://www.arduino.cc/en/Reference/Scope");this.setColour(Blockly.Colours.cVariableOperation.secondary,Blockly.Colours.cVariableOperation.secondary,
Blockly.Colours.cVariableOperation.tertiary)}};
Blockly.Blocks.instance_set_number={init:function(){var a=new Blockly.FieldDropdown([["=","="],["++","++"],["- -","--"],["+=","+="],["- =","-="],["*=","*="],["/=","/="],["%=","%="]],function(a){this.sourceBlock_.updateShape(a)});this.appendDummyInput().appendField(new Blockly.FieldInstanceDropdown("NumberInstance"),"instance_name").appendField(a,"op");this.appendValueInput("VALUE").setCheck(["Number","Boolean"]);this.setInputsInline(!0);this.setPreviousStatement(!0,null);this.setNextStatement(!0,
null);this.setColour(Blockly.Colours.cVariableOperation.primary,Blockly.Colours.cVariableOperation.secondary,Blockly.Colours.cVariableOperation.tertiary);this.setTooltip("Stores the value to the right of the equal sign in the variable to the left of the equal sign");this.setHelpUrl("https://www.arduino.cc/en/Reference/Assignment")},afterCreateBeforRender:function(){var a=this.getFieldValue("op");this.updateShape(a)},updateShape:function(a){var b=this.getInput("VALUE");a&&(0<=a.indexOf("=")?!1!==b.hide&&
(b.hide=!1,b.setVisible(!0),addShadowNumberToInput(b)):!0!==b.hide&&(b.setVisible(!1),b.hide=!0))}};
Blockly.Blocks.instance_create_boolean={init:function(){this.appendDummyInput().appendField("boolean ").appendField(new Blockly.FieldInstanceInput("BooleanInstance"),"NAME").appendField("=").appendField(new Blockly.FieldDropdown([["False","false"],["True","true"]]),"initValue");this.setInputsInline(!0);this.setOutput(!0,"booleanInstanceDefine");this.setOutputShape(Blockly.OUTPUT_SHAPE_SQUARE);this.setColour(Blockly.Colours.cVariableDefine.primary,Blockly.Colours.cVariableDefine.secondary,Blockly.Colours.cVariableDefine.tertiary);
this.setTooltip("A boolean holds one of two values, true or false.");this.setHelpUrl("https://www.arduino.cc/en/Reference/BooleanVariables")}};
Blockly.Blocks.instance_set_boolean={init:function(){this.appendDummyInput().appendField(new Blockly.FieldInstanceDropdown("BooleanInstance"),"instance_name").appendField("=");this.appendValueInput("VALUE").setCheck("Boolean");this.setInputsInline(!0);this.setPreviousStatement(!0,null);this.setNextStatement(!0,null);this.setColour(Blockly.Colours.cVariableOperation.primary,Blockly.Colours.cVariableOperation.secondary,Blockly.Colours.cVariableOperation.tertiary);this.setTooltip("Stores the value to the right of the equal sign in the variable to the left of the equal sign");
this.setHelpUrl("https://www.arduino.cc/en/Reference/Assignment")}};
Blockly.Blocks.instance_boolean_getter={init:function(){this.appendDummyInput().setAlign(Blockly.ALIGN_CENTRE).appendField(new Blockly.FieldInstanceGetter("",""),"NAME");this.setInputsInline(!0);this.setOutput(!0,["Boolean","BooleanInstance"]);this.setTooltip("retrieve value from variable sign");this.setHelpUrl("https://www.arduino.cc/en/Reference/Scope");this.setColour(Blockly.Colours.cVariableOperation.secondary,Blockly.Colours.cVariableOperation.secondary,Blockly.Colours.cVariableOperation.tertiary);
this.setOutputShape(Blockly.OUTPUT_SHAPE_HEXAGONAL)}};
Blockly.Blocks.instance_create_string={init:function(){this.appendDummyInput().appendField("string ").appendField(new Blockly.FieldInstanceInput("StringInstance","str1","str"),"NAME").appendField("=").appendField(new Blockly.FieldTextInput("hello!"),"initValue");this.setInputsInline(!0);this.setOutput(!0,"StringInstanceDefine");this.setOutputShape(Blockly.OUTPUT_SHAPE_SQUARE);this.setColour(Blockly.Colours.cVariableDefine.primary,Blockly.Colours.cVariableDefine.secondary,Blockly.Colours.cVariableDefine.tertiary);
this.setTooltip("The String class,allows you to use and manipulate strings");this.setHelpUrl("https://www.arduino.cc/en/Reference/StringObject")}};
Blockly.Blocks.instance_set_string={init:function(){this.appendDummyInput().appendField(new Blockly.FieldInstanceDropdown("StringInstance"),"instance_name").appendField("=");this.appendValueInput("VALUE").setCheck("String");this.setInputsInline(!0);this.setPreviousStatement(!0,null);this.setNextStatement(!0,null);this.setColour(Blockly.Colours.cVariableOperation.primary,Blockly.Colours.cVariableOperation.secondary,Blockly.Colours.cVariableOperation.tertiary);this.setTooltip("Stores the value to the right of the equal sign in the variable to the left of the equal sign");
this.setHelpUrl("https://www.arduino.cc/en/Reference/String")}};
Blockly.Blocks.instance_string_getter={init:function(){this.appendDummyInput().setAlign(Blockly.ALIGN_CENTRE).appendField(new Blockly.FieldInstanceGetter("",""),"NAME");this.setInputsInline(!0);this.setOutput(!0,["String","StringInstance"]);this.setTooltip("retrieve value from variable sign");this.setHelpUrl("https://www.arduino.cc/en/Reference/String");this.setColour(Blockly.Colours.cVariableOperation.secondary,Blockly.Colours.cVariableOperation.secondary,Blockly.Colours.cVariableOperation.tertiary);
this.setOutputShape(Blockly.OUTPUT_SHAPE_SQUARE)}};
Blockly.Blocks.instance_create_array={init:function(){this.appendDummyInput().appendField(new Blockly.FieldDropdown([["int","int"],["long","long"],["unsigned int","unsigned int"],["unsigned long","unsigned long"],["char","char"],["byte","byte"],["float","float"]]),"TYPE");this.appendDummyInput().appendField(" ").appendField(new Blockly.FieldInstanceInput("ArrayInstance","arr","arr"),"NAME").appendField("[").appendField(new Blockly.FieldNumber(10,0),"INITVALUE").appendField("]");this.setInputsInline(!0);
this.setColour(Blockly.Colours.cVariableDefine.primary,Blockly.Colours.cVariableDefine.secondary,Blockly.Colours.cVariableDefine.tertiary);this.setTooltip("An array is a collection of variables that are accessed with an index number");this.setHelpUrl("https://www.arduino.cc/en/Reference/Array");this.initValue=[]},mutationToDom:function(){if(0>=this.initValue.length)return null;var a=document.createElement("mutation");a.setAttribute("initValue",this.initValue.toString());return a},domToMutation:function(a){a?
(this.initValue=a.getAttribute("initValue"),this.initValue||(this.initValue=[])):this.initValue=[];this.updateShape_()},decompose:function(a){var b=a.newBlock("instance_array_array");b.setFieldValue(this.getFieldValue("NAME"),"NAME");b.initSvg();for(var c=b.nextConnection,d=0;d<this.initValue.length;d++){var e=a.newBlock("instance_array_number");e.setFieldValue(this.initValue[d],"initValue");e.initSvg();c.connect(e.previousConnection);c=e.nextConnection}return b},compose:function(a){a=a.nextConnection.targetBlock();
var b=0;for(this.initValue=[];a;)this.initValue[b]=a.getFieldValue("initValue"),b++,a=a.nextConnection&&a.nextConnection.targetBlock();this.updateShape_()},saveConnections:function(a){},updateShape_:function(){}};
Blockly.Blocks.instance_array_number={init:function(){this.setColour(Blockly.Colours.cVariableDefine.primary,Blockly.Colours.cVariableDefine.secondary,Blockly.Colours.cVariableDefine.tertiary);this.appendDummyInput().setAlign(Blockly.ALIGN_CENTRE).appendField(new Blockly.FieldTextInput("0"),"initValue");this.setPreviousStatement(!0);this.setNextStatement(!0);this.setTooltip("");this.contextMenu=!1}};
Blockly.Blocks.instance_array_array={init:function(){this.setColour(Blockly.Colours.cVariableDefine.primary,Blockly.Colours.cVariableDefine.secondary,Blockly.Colours.cVariableDefine.tertiary);this.appendDummyInput().appendField("arrayName","NAME");this.setNextStatement(!0);this.setTooltip("");this.contextMenu=!1}};
Blockly.Blocks.instance_set_array={init:function(){this.appendDummyInput().appendField(new Blockly.FieldInstanceGetter("",""),"NAME");this.appendValueInput("INDEX").setCheck("Number").appendField("[");this.appendValueInput("VALUE").setCheck("Number").appendField("] =");this.setInputsInline(!0);this.setPreviousStatement(!0,null);this.setNextStatement(!0,null);this.setColour(Blockly.Colours.cVariableOperation.secondary,Blockly.Colours.cVariableOperation.secondary,Blockly.Colours.cVariableOperation.tertiary);
this.setTooltip("assign a value to an array");this.setHelpUrl("https://www.arduino.cc/en/Reference/Array")}};
Blockly.Blocks.instance_array_getter={init:function(){this.appendDummyInput().appendField(new Blockly.FieldInstanceGetter("",""),"NAME").appendField("[");this.appendValueInput("INDEX").setCheck("Number");this.appendDummyInput().appendField("]");this.setInputsInline(!0);this.setOutput(!0,["Number","NumberInstance"]);this.setTooltip("retrieve a value from an array");this.setHelpUrl("https://www.arduino.cc/en/Reference/Array");this.setColour(Blockly.Colours.cVariableOperation.secondary,Blockly.Colours.cVariableOperation.secondary,
Blockly.Colours.cVariableOperation.tertiary);this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND)}};
// Copyright 2012 Google Inc.  Apache License 2.0
Blockly.Blocks.operators={};
Blockly.Blocks.arithmeticoperators={init:function(){this.appendValueInput("NUM1").setCheck("Number");this.appendDummyInput().appendField(" ").appendField(new Blockly.FieldDropdown([["+","+"],["-","-"],["*","*"],["/","/"],["%","%"]]),"Operators");this.appendValueInput("NUM2").setCheck("Number").appendField(" ");this.setInputsInline(!0);this.setOutput(!0,"Number");this.setColour(Blockly.Colours.cMathOperation.primary,Blockly.Colours.cMathOperation.secondary,Blockly.Colours.cMathOperation.tertiary);this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);
var a=this;this.setTooltip(function(){return{"+":"These operators return the sum of the two operands","-":"These operators return the difference of the two operands","*":"These operators return the product of the two operands","/":"These operators return the quotient (respectively) of the two operands","%":"Calculates the remainder when one integer is divided by another."}[a.getFieldValue("Operators")]});this.setHelpUrl(function(){return"%"==a.getFieldValue("Operators")?"https://www.arduino.cc/en/Reference/Modulo":
"https://www.arduino.cc/en/Reference/Arithmetic"})}};
Blockly.Blocks.comparisonoperators={init:function(){this.appendValueInput("NUM1").setCheck(["Boolean","Number"]);this.appendDummyInput().appendField(" ").appendField(new Blockly.FieldDropdown([["==","=="],["!=","!="],["<","<"],[">",">"],["<=","<="],[">=",">="]]),"Operators");this.appendValueInput("NUM2").setCheck(["Boolean","Number"]).appendField(" ");this.setInputsInline(!0);this.setOutput(!0,"Boolean");this.setColour(Blockly.Colours.cMathOperation.primary,Blockly.Colours.cMathOperation.secondary,
Blockly.Colours.cMathOperation.tertiary);this.setOutputShape(Blockly.OUTPUT_SHAPE_HEXAGONAL);var a=this;this.setTooltip(function(){return{"==":"x == y (x is equal to y)?","!=":"x != y (x is not equal to y)?","<":"x <  y (x is less than y)?",">":"x >  y (x is greater than y)?","<=":"x <= y (x is less than or equal to y)?",">=":"x >= y (x is greater than or equal to y)?"}[a.getFieldValue("Operators")]});this.setHelpUrl(function(){return"%"==a.getFieldValue("Operators")?"https://www.arduino.cc/en/Reference/Modulo":
"https://www.arduino.cc/en/Reference/Arithmetic"})}};
Blockly.Blocks.booleanoperators={init:function(){this.appendValueInput("NUM1").setCheck("Boolean");this.appendDummyInput().appendField(" ").appendField(new Blockly.FieldDropdown([["AND","&&"],["OR","||"]]),"Operators");this.appendValueInput("NUM2").setCheck("Boolean").appendField(" ");this.setInputsInline(!0);this.setOutput(!0,"Boolean");this.setColour(Blockly.Colours.cMathOperation.primary,Blockly.Colours.cMathOperation.secondary,Blockly.Colours.cMathOperation.tertiary);this.setOutputShape(Blockly.OUTPUT_SHAPE_HEXAGONAL);
var a=this;this.setTooltip(function(){return{"&&":"True only if both operands are true","||":"True if either operand is true"}[a.getFieldValue("Operators")]});this.setHelpUrl("https://www.arduino.cc/en/Reference/Boolean")}};
Blockly.Blocks.notoperators={init:function(){this.appendValueInput("NUM2").setCheck("Boolean").appendField("NOT");this.setInputsInline(!0);this.setOutput(!0,"Boolean");this.setColour(Blockly.Colours.cMathOperation.primary,Blockly.Colours.cMathOperation.secondary,Blockly.Colours.cMathOperation.tertiary);this.setOutputShape(Blockly.OUTPUT_SHAPE_HEXAGONAL);this.setTooltip("True if the operand is false");this.setHelpUrl("https://www.arduino.cc/en/Reference/Boolean")}};
Blockly.Blocks.mathminmax={init:function(){this.appendDummyInput().appendField(new Blockly.FieldDropdown([["min","min"],["max","max"]]),"OPERATOR");this.appendValueInput("NUM1").setCheck("Number").appendField("of");this.appendValueInput("NUM2").setCheck("Number").appendField("or");this.setInputsInline(!0);this.setOutput(!0,"Number");this.setColour(Blockly.Colours.cMathOperation.primary,Blockly.Colours.cMathOperation.secondary,Blockly.Colours.cMathOperation.tertiary);this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);
var a=this;this.setTooltip(function(){return{min:"Calculates the minimum of two numbers",max:"Calculates the maximum of two numbers"}[a.getFieldValue("Operators")]});this.setHelpUrl(function(){return"min"==a.getFieldValue("Operators")?"https://www.arduino.cc/en/Reference/Min":"https://www.arduino.cc/en/Reference/Max"})}};
Blockly.Blocks.mathoperators={init:function(){this.appendDummyInput().appendField(new Blockly.FieldDropdown([["abs","abs"],["sqrt","sqrt"],["sin","sin"],["cos","cos"],["tan","tan"]]),"OPERATOR");this.appendValueInput("NUM").setCheck("Number").appendField("of");this.setInputsInline(!0);this.setOutput(!0,"Number");this.setColour(Blockly.Colours.cMathOperation.primary,Blockly.Colours.cMathOperation.secondary,Blockly.Colours.cMathOperation.tertiary);this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);var a=
this;this.setTooltip(function(){return{abs:"Computes the absolute value of a number",sqrt:"Calculates the square root of a number",sin:"Calculates the sine of an angle (in radians). The result will be between -1 and 1.",cos:"Calculates the cos of an angle (in radians). The result will be between -1 and 1.",tan:"Calculates the tangent of an angle (in radians). The result will be between negative infinity and infinity."}[a.getFieldValue("OPERATOR")]});this.setHelpUrl(function(){return{abs:"https://www.arduino.cc/en/Reference/Abs",
sqrt:"https://www.arduino.cc/en/Reference/Sqrt",sin:"https://www.arduino.cc/en/Reference/Sin",cos:"https://www.arduino.cc/en/Reference/Cos",tan:"https://www.arduino.cc/en/Reference/Tan"}[a.getFieldValue("OPERATOR")]})}};
Blockly.Blocks.mathconstrain={init:function(){this.appendValueInput("X").setCheck("Number").appendField("constrain");this.appendValueInput("A").setCheck("Number").appendField("range");this.appendValueInput("B").setCheck("Number").appendField("to");this.setInputsInline(!0);this.setOutput(!0,"Number");this.setColour(Blockly.Colours.cMathOperation.primary,Blockly.Colours.cMathOperation.secondary,Blockly.Colours.cMathOperation.tertiary);this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);this.setTooltip("Constrains a number to be within a range");
this.setHelpUrl("https://www.arduino.cc/en/Reference/Constrain")}};
Blockly.Blocks.mathmap={init:function(){this.appendValueInput("X").setCheck("Number").appendField("map");this.appendValueInput("FL").setCheck("Number").appendField("from");this.appendValueInput("FH").setCheck(null).appendField(",");this.appendValueInput("TL").setCheck("Number").appendField("to");this.appendValueInput("TH").setCheck("Number").appendField(",");this.setInputsInline(!0);this.setOutput(!0,"Number");this.setColour(Blockly.Colours.cMathOperation.primary,Blockly.Colours.cMathOperation.secondary,
Blockly.Colours.cMathOperation.tertiary);this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);this.setTooltip("Re-maps a number from one range to another");this.setHelpUrl("https://www.arduino.cc/en/Reference/Map")}};
Blockly.Blocks.mathrandom={init:function(){this.appendValueInput("L").setCheck("Number").appendField("pick random from");this.appendValueInput("H").setCheck("Number").appendField("to");this.setInputsInline(!0);this.setOutput(!0,"Number");this.setColour(Blockly.Colours.cMathOperation.primary,Blockly.Colours.cMathOperation.secondary,Blockly.Colours.cMathOperation.tertiary);this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);this.setTooltip("generates pseudo-random numbers");this.setHelpUrl("https://www.arduino.cc/en/Reference/Random")}};
Blockly.Blocks.math_boolean_menu={init:function(){this.appendDummyInput().appendField(new Blockly.FieldDropdown([["True","true"],["False","false"]]),"state");this.setInputsInline(!0);this.setOutput(!0,"Boolean");this.setColour(Blockly.Colours.cMathOperation.secondary,Blockly.Colours.cMathOperation.secondary,Blockly.Colours.cMathOperation.tertiary);this.setOutputShape(Blockly.OUTPUT_SHAPE_HEXAGONAL);this.setTooltip("");this.setHelpUrl("")}};Blockly.Blocks.procedures={};Blockly.Blocks.instance_procedure={init:function(){this.appendDummyInput().appendField("void ").appendField(new Blockly.FieldInstanceInput("ProcedureInstance","","procedure"),"NAME");this.appendStatementInput("statement").setCheck(null);this.setInputsInline(!0);this.setColour("#1f9999","#2a8c8c","#287373");this.setTooltip("PROCEDURE IS A SEQUENCE OF PROGRAM INSTRUCTIONS THAT PERFORM A SPECIFIC TASK");this.setHelpUrl("https://en.wikipedia.org/wiki/Subroutine")}};
Blockly.Blocks.instance_procedure_call={init:function(){this.appendDummyInput().appendField("call ").appendField(new Blockly.FieldInstanceGetter("",""),"NAME");this.setInputsInline(!0);this.setPreviousStatement(!0,null);this.setNextStatement(!0,null);this.setColour("#2a8c8c","#2a8c8c","#287373");this.setTooltip("Execute a sequence of instructions");this.setHelpUrl("https://en.wikipedia.org/wiki/Subroutine")}};